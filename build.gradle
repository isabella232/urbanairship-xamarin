ext {
    airshipProperties = new Properties()
    airshipProperties.load(new FileInputStream("airship.properties"))
    toolsDir = new File("$projectDir/.tools")
    if ( !toolsDir.exists() ) {
        toolsDir.mkdirs()
    }
    rootDir = new File("$projectDir")
    nugetExe = new File("$toolsDir/nuget.exe")
    if (!nugetExe.exists()) {
        new URL('https://dist.nuget.org/win-x86-commandline/latest/nuget.exe').withInputStream{
            i -> nugetExe.withOutputStream{ it << i }
        }
    }
    msbuild = "/Library/Frameworks/Mono.framework/Commands/msbuild"
}

// Build nuget pkgs -- can pass in parameters (nuspec files) to specify which
// nupkg files to build
task pkg {
    doLast() {
        def nuspecs = []
        if (project.hasProperty('nuspec')) {
            nuspecs = nuspec.split(',')
        } else {
            nuspecs = [
                "UrbanAirship.Android.Core.nuspec",
                "UrbanAirship.Android.ADM.nuspec",
                "UrbanAirship.Android.FCM.nuspec",
                "UrbanAirship.Android.Preference.nuspec",
                "UrbanAirship.Android.Accengage.nuspec",
                "UrbanAirship.Android.MessageCenter.nuspec",
                "UrbanAirship.Android.Automation.nuspec",
                "UrbanAirship.Android.Location.nuspec",
                "UrbanAirship.NETStandard.nuspec",
                "UrbanAirship.iOS.nuspec",
                "UrbanAirship.iOS.Core.nuspec",
                "UrbanAirship.iOS.Accengage.nuspec",
                "UrbanAirship.iOS.Automation.nuspec",
                "UrbanAirship.iOS.ExtendedActions.nuspec",
                "UrbanAirship.iOS.MessageCenter.nuspec",
                "UrbanAirship.iOS.Location.nuspec",
                "UrbanAirship.iOS.NotificationContentExtension.nuspec",
                "UrbanAirship.iOS.NotificationServiceExtension.nuspec"
            ]
        }

        for (nuspec in nuspecs) {
            exec {
                commandLine "mono", "${nugetExe}", "pack", "$nuspec", "-OutputDirectory", "$buildDir"
            }
        }
    }
}
pkg.dependsOn('build')

// Create local nuget feed
task createLocalFeed {
    doLast() {
        // add doesn't have a "-force" option, so first remove all the nuget packages from the local feed
        File localNugetFeed = file("${rootDir}/local-nuget-feed")
        localNugetFeed.deleteDir()

        // get all the nuget packages from the build directory
        def nupkgs = buildDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".nupkg");
            }
        })

        // add the packages to the local nuget feed
        nupkgs.each { nupkg ->
            // add the package to the local nuget feed
            exec {
                commandLine "mono", "${nugetExe}", "add", "$nupkg", "-source", "$localNugetFeed"
            }
        }

        // clear the local nuget cache (so new packages with unchanged versions are used)
        exec {
            commandLine "mono", "${nugetExe}", "locals", "all", "-clear"
        }

    }
}
createLocalFeed.dependsOn('pkg')

// Sync the nuspec and shared assembly versions with the version declared in the airship.properties file.
task syncRootVersion {
    doLast() {

        def androidNugetVersion = airshipProperties.androidVersion
        if (airshipProperties['androidPackageVersion']) {
            androidNugetVersion = "${airshipProperties.androidVersion}.${airshipProperties.androidPackageVersion}"
        }

        def iosNugetVersion = airshipProperties.iosVersion
        if (airshipProperties['iosPackageVersion']) {
            iosNugetVersion = "${airshipProperties.iosVersion}.${airshipProperties.iosPackageVersion}"
        }

        // Handle Android nuspec versions
        ant.replaceregexp(
            match: "<version>.*</version>",
            replace: "<version>$androidNugetVersion</version>"
        ) {
            fileset(dir: "$projectDir", includes: "UrbanAirship.Android*.nuspec")
        }

        // Handle iOS nuspec versions
        ant.replaceregexp(
            match: "<version>.*</version>",
            replace: "<version>$iosNugetVersion</version>"
        ) {
            fileset(dir: "$projectDir", includes: "UrbanAirship.iOS*.nuspec")
        }

        // Handle .NET Standard versions
        ant.replaceregexp(
            file: "$projectDir/UrbanAirship.NETStandard.nuspec",
            match: "<version>.*</version>",
            replace: "<version>$airshipProperties.crossPlatformVersion</version>",
            flags: "g"
        )

        // handle urbanairship.android.core dependencies
        ant.replaceregexp(
            match: "<dependency id=\"urbanairship.android(.*)\" version=\".*\"/>",
            replace: "<dependency id=\"urbanairship.android\\1\" version=\"$androidNugetVersion\"/>",
            flags: "g"
        ) {
            fileset(dir: "$projectDir", includes: "UrbanAirship*.nuspec")
        }

        // handle urbanairship.ios dependencies
        ant.replaceregexp(
            match: "<dependency id=\"urbanairship.ios(.*)\" version=\".*\"/>",
            replace: "<dependency id=\"urbanairship.ios\\1\" version=\"$iosNugetVersion\"/>",
            flags: "g"
        ) {
            fileset(dir: "$projectDir", includes: "UrbanAirship*.nuspec")
        }

        // Shared assembly info
        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.CrossPlatform.cs",
            match: "AssemblyVersion (.*)]",
            replace: "AssemblyVersion (\"$airshipProperties.crossPlatformVersion\")]"
        )

        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.Android.cs",
            match: "AssemblyVersion (.*)]",
            replace: "AssemblyVersion (\"$airshipProperties.androidVersion\")]"
        )

        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.iOS.cs",
            match: "AssemblyVersion (.*)]",
            replace: "AssemblyVersion (\"$airshipProperties.iosVersion\")]"
        )

        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.Common.cs",
            match: "UACrossPlatformVersion (.*)]",
            replace: "UACrossPlatformVersion (\"$airshipProperties.crossPlatformVersion\")]"
        )
    }
}

// Sync subproject versions with the version declared in the airship.properties file.
task syncVersion
syncVersion.mustRunAfter('clean')
syncVersion.dependsOn('syncRootVersion')
syncVersion.dependsOn(':src:AirshipBindings.Android.ADM:syncVersion',
    ':src:AirshipBindings.Android.ADM:syncVersion',
    ':src:AirshipBindings.Android.Core:syncVersion',
    ':src:AirshipBindings.Android.FCM:syncVersion',
    ':src:AirshipBindings.Android.Preference:syncVersion',
    ':src:AirshipBindings.Android.Accengage:syncVersion',
    ':src:AirshipBindings.Android.MessageCenter:syncVersion',
    ':src:AirshipBindings.Android.Automation:syncVersion',
    ':src:AirshipBindings.Android.Location:syncVersion',
    ':src:AirshipBindings.iOS.common:syncVersion',
 )

class PublishTask extends DefaultTask {
    @InputDirectory
    @Optional
    def File nupkgDir = getProject().buildDir

    @Input
    @Optional
    def File nugetExec = getProject().nugetExe

    @Input
    def String nugetRepoURL

    @Input
    def String nugetApiKey

    @TaskAction
    def publish() {
        // get all the nuget packages from the build directory
        def nupkgs = nupkgDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".nupkg");
            }
        })

        // publish the packages to nuget
        nupkgs.each { nupkg ->
            // publish the package
            getProject().exec {
                ignoreExitValue true
                commandLine "mono", "${nugetExec}", "push", "$nupkg", "-source", "${nugetRepoURL}", "-apikey", "${nugetApiKey}"
            }
        }
    }
}

task publishToStaging(type:PublishTask) {
    nugetRepoURL = "https://int.nugettest.org/api/v2/package"
    nugetApiKey = "$System.env.NUGET_STAGING_API_KEY"
}
publishToStaging.dependsOn('pkg')

task publishToProduction(type:PublishTask) {
    nugetRepoURL = "https://www.nuget.org/api/v2/package"
    nugetApiKey = "$System.env.NUGET_PRODUCTION_API_KEY"
}
publishToProduction.dependsOn('pkg')

//--- GLOBAL TASKS ---//

// Clean all
task clean(type: Delete) {
    doLast() {
        project.delete(files("$buildDir"))
    }
}

clean.dependsOn(':src:AirshipBindings.Android.ADM:clean',
    ':src:AirshipBindings.Android.ADM:clean',
    ':src:AirshipBindings.Android.Core:clean',
    ':src:AirshipBindings.Android.FCM:clean',
    ':src:AirshipBindings.Android.Preference:clean',
    ':src:AirshipBindings.Android.Accengage:clean',
    ':src:AirshipBindings.Android.MessageCenter:clean',
    ':src:AirshipBindings.Android.Automation:clean',
    ':src:AirshipBindings.Android.Location:clean',
    ':src:AirshipBindings.iOS.common:clean',
 )

// Build the plugin
task build() {
    doFirst {
        mkdir project.buildDir
    }
}
build.mustRunAfter('clean')
build.dependsOn('syncVersion')
build.dependsOn(':docs:build',
    ':src:AirshipBindings.Android.ADM:build',
    ':src:AirshipBindings.Android.Core:build',
    ':src:AirshipBindings.Android.FCM:build',
    ':src:AirshipBindings.Android.Preference:build',
    ':src:AirshipBindings.Android.Accengage:build',
    ':src:AirshipBindings.Android.MessageCenter:build',
    ':src:AirshipBindings.Android.Automation:build',
    ':src:AirshipBindings.Android.Location:build',
    ':src:AirshipBindings.NETStandard:build',
    ':src:AirshipBindings.iOS.Core:build',
    ':src:AirshipBindings.iOS.Accengage:build',
    ':src:AirshipBindings.iOS.Automation:build',
    ':src:AirshipBindings.iOS.ExtendedActions:build',
    ':src:AirshipBindings.iOS.MessageCenter:build',
    ':src:AirshipBindings.iOS.Location:build',
    ':src:AirshipBindings.iOS.NotificationContentExtension:build',
    ':src:AirshipBindings.iOS.NotificationServiceExtension:build' )

task getVersion() {
    doLast {
        println airshipProperties.crossPlatformVersion
    }
}
