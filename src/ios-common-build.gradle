task processIOSSDK {
    dependsOn ':src:AirshipBindings.iOS.common:carthageCheckout'
    doLast() {
        // SourceKitten
        println "Running Sourcekitten"

        // get path to the repo checkout
        def carthageCheckoutPath = "${rootDir}/Carthage/Checkouts/ios-library"

        // get path to the module's source
        def moduleSourcePath = ""
        if ( iosSdkModuleName.endsWith("Extension") ) {
            moduleSourcePath = "AirshipExtensions/${iosSdkModuleName}/Source"
        } else {
            moduleSourcePath = "Airship/${iosSdkModuleName}/Source"
        }

        // get path to the module's header
        def moduleHeader = ""
        if ( iosSdkModuleName == "AirshipCore" ) {
            moduleHeader = "${moduleSourcePath}/Common/${iosSdkModuleName}.h"
        } else {
            moduleHeader ="${moduleSourcePath}/${iosSdkModuleName}.h"
        }

        // get path to the SDK
        def out = new ByteArrayOutputStream()
        exec {
            commandLine "xcrun", "--show-sdk-path", "--sdk", "iphonesimulator"
            standardOutput = out
        }
        def sdkPath = out.toString().replaceAll("\\s","")

        // arguments for the sourcekitten command
        def skArgs = [ "doc",
                       "--objc",
                       moduleHeader,
                       "--",
                       "-x",
                       "objective-c",
                       "-isysroot", sdkPath,
                       "-I", "${carthageCheckoutPath}",
                       "-I", "${carthageCheckoutPath}/Airship/AirshipCore/Source/common",
                       "-I", "${carthageCheckoutPath}/Airship/AirshipCore/Source/ios",
                       "-I", "${carthageCheckoutPath}/${moduleSourcePath}",
                       "-fmodules",
                       "-D", "UA_USE_MODULE_IMPORT=0" ]

        // manually add all folders in the module's Source directory
        out.reset()
        exec {
            workingDir "${carthageCheckoutPath}"
            commandLine "find", moduleSourcePath, "-type", "d", "-mindepth", "1"
            standardOutput = out
        }
        def moduleFolders = out.toString().split('\n')
        moduleFolders.each {
            skArgs.addAll("-I", "${carthageCheckoutPath}/${it}");
        }

        def skParse = "${carthageCheckoutPath}/sourcekitten_parse.${iosSdkModuleName}.json"

        try {
            exec {
                executable "which"
                args "sourcekitten"
            }
        } catch(Exception e) {
            throw new GradleException("ERROR: You must have sourcekitten installed. Run 'brew install sourcekitten'")
        }

        // run SourceKitten
        exec {
            workingDir carthageCheckoutPath
            executable "sourcekitten"
            args skArgs
            standardOutput new FileOutputStream(skParse)
        }

        processIOSSDK.ext.skParse = skParse
    }
}

processIOSSDK.mustRunAfter('clean')

task generateIOSBindings {
    dependsOn 'processIOSSDK'
    dependsOn ':src:AirshipBindings.iOS.common:checkoutXamboni'
    doLast() {
        println("Generating bindings for ${iosSdkModuleName} module.")

        exec {
            workingDir project(':src:AirshipBindings.iOS.common').checkoutXamboni.repoPath
            commandLine "python", "xamboni.py", "--module=${iosSdkModuleName}", "--sourcekitten_parse=${processIOSSDK.skParse}", "--output_dir=${projectDir}"
        }
    }
}