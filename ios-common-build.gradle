task cloneIOSSDK {
    doLast() {
        // clone iOS SDK at specified version, if it doesn't already exist
        println("Downloading iOS SDK version ${airshipProperties.iosVersion}")
        def tmpDir = System.getProperty("java.io.tmpdir")
        def iosTempRepo = new File("${tmpDir}/ios-library-for-xamboni")
        iosTempRepo.deleteOnExit()

        boolean cloneRepo = false
        if ( !iosTempRepo.exists() ) {
            // cloned repo doesn't exist, so clone it
            cloneRepo = true
        } else {
            // cloned repo exists, so check if it is the right version
            def out = new ByteArrayOutputStream()
            exec {
                commandLine "git", "-C", "${iosTempRepo}", "tag", "--points-at", "HEAD"
                standardOutput = out
            }
            def currentRepoHead = out.toString().replaceAll("\\s","")
            if ( currentRepoHead == airshipProperties.iosVersion ) {
                cloneRepo = false
            } else {
                iosTempRepo.deleteDir()
                cloneRepo = true
            }
        }

        // actually clone the repo, if necessary
        if (cloneRepo) {
            println("Cloning ios-library to ${iosTempRepo}")
            exec {
                commandLine "git", "clone", "-c", "advice.detachedHead=false", "--branch", "${airshipProperties.iosVersion}", "https://github.com/urbanairship/ios-library", "${iosTempRepo}"
            }
        } else {
            println("Using existing clone of ios-library @ ${iosTempRepo}")
        }

        cloneIOSSDK.ext.iosRepoPath = iosTempRepo
    }
}

task processIOSSDK {
    dependsOn 'cloneIOSSDK'
    doLast() {
        // SourceKitten
        println "Running Sourcekitten"

        // get path to the module's source
        def moduleSourcePath = ""
        if ( iosSdkModuleName.endsWith("Extension") ) {
            moduleSourcePath="AirshipExtensions/${iosSdkModuleName}/Source"
        } else {
            moduleSourcePath="Airship/${iosSdkModuleName}/Source"
        }

        // get path to the module's header
        def moduleHeader = ""
        if ( iosSdkModuleName == "AirshipCore" ) {
            moduleHeader = "${moduleSourcePath}/Common/${iosSdkModuleName}.h"
        } else {
            moduleHeader ="${moduleSourcePath}/${iosSdkModuleName}.h"
        }

        // get path to the SDK
        def out = new ByteArrayOutputStream()
        exec {
            commandLine "xcrun", "--show-sdk-path", "--sdk", "iphonesimulator"
            standardOutput = out
        }
        def sdkPath = out.toString().replaceAll("\\s","")

        // arguments for the sourcekitten command
        def skArgs = [ "doc",
                       "--objc",
                       moduleHeader,
                       "--",
                       "-x",
                       "objective-c",
                       "-isysroot", sdkPath,
                       "-I", "${cloneIOSSDK.iosRepoPath}",
                       "-I", "${cloneIOSSDK.iosRepoPath}/Airship/AirshipCore/Source/common",
                       "-I", "${cloneIOSSDK.iosRepoPath}/Airship/AirshipCore/Source/ios",
                       "-I", "${cloneIOSSDK.iosRepoPath}/${moduleSourcePath}",
                       "-fmodules",
                       "-D", "UA_USE_MODULE_IMPORT=0" ]

        // manually add all folders in the module's Source directory
        out.reset()
        exec {
            workingDir cloneIOSSDK.iosRepoPath
            commandLine "find", moduleSourcePath, "-type", "d", "-mindepth", "1"
            standardOutput = out
        }
        def moduleFolders = out.toString().split('\n')
        moduleFolders.each {
            skArgs.addAll("-I", "${cloneIOSSDK.iosRepoPath}/${it}");
        }

        def skParse = "${cloneIOSSDK.iosRepoPath}/sourcekitten_parse.${iosSdkModuleName}.json"

        try {
            exec {
                executable "which"
                args "sourcekitten"
            }
        } catch(Exception e) {
            throw new GradleException("ERROR: You must have sourcekitten installed. Run 'brew install sourcekitten'")
        }

        // run SourceKitten
        exec {
            workingDir cloneIOSSDK.iosRepoPath
            executable "sourcekitten"
            args skArgs
            standardOutput new FileOutputStream(skParse)
        }

        processIOSSDK.ext.skParse = skParse
    }
}

task generateIOSBindings {
    dependsOn 'processIOSSDK'
    doLast() {
        println("Updating bindings for ${iosSdkModuleName} module.")

        // Xamboni
        def tmpDir = System.getProperty("java.io.tmpdir")
        def xamboniTempRepo = new File("${tmpDir}/xamboni")
        xamboniTempRepo.deleteOnExit()

        boolean cloneXamboniRepo = false
        if ( !xamboniTempRepo.exists() ) {
            cloneXamboniRepo = true
        }

        if (cloneXamboniRepo) {
            println("Cloning Xamboni repo to ${xamboniTempRepo}")
            exec {
                commandLine "git", "clone", "git@github.com:urbanairship/xamboni.git", "${xamboniTempRepo}"
            }
        } else {
            println("Using existing clone of Xamboni repo @ ${xamboniTempRepo}")
        }

        println "Running Xamboni"

        exec {
            workingDir xamboniTempRepo
            commandLine "python", "xamboni.py", "--module=${iosSdkModuleName}", "--sourcekitten_parse=${processIOSSDK.skParse}", "--output_dir=${projectDir}"
        }
    }
}

generateIOSBindings.mustRunAfter('clean')

task cleanClonedRepos(type: Delete) {
    doLast() {
        def tmpDir = System.getProperty("java.io.tmpdir")
        def iosTempRepo = new File("${tmpDir}/ios-library-for-xamboni")
        def xamboniTempRepo = new File("${tmpDir}/xamboni")

        project.delete(files(iosTempRepo, xamboniTempRepo))
    }
}

rootProject.clean.dependsOn cleanClonedRepos